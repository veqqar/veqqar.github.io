{"ast":null,"code":"var _jsxFileName = \"/home/johnlemon/portfolio/src/components/HomeCarousel.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport section1Image from '../assets/imgs/carrousel_img_1.jpg';\nimport section2Image from '../assets/imgs/carrousel_img_2.jpg';\nimport section3Image from '../assets/imgs/carrousel_img_3.jpg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sectionImages = [section1Image, section2Image, section3Image];\nconst NUM_STRIPS = 20;\nconst ANIMATION_DURATION = 500;\nconst STRIP_DELAY = 30;\nconst START_ROW = 0;\nconst HomeCarousel = ({\n  section\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [image, setImage] = useState(null);\n  const [targetStrip, setTargetStrip] = useState(null);\n  const currentStrip = useRef(null);\n  const animationRef = useRef(null);\n  const stripsProgress = useRef(Array(NUM_STRIPS).fill(0));\n  const isAnimating = useRef(false);\n  const mousePos = useRef({\n    x: 0,\n    y: 0\n  });\n\n  // Cargar imagen actual\n  useEffect(() => {\n    const img = new Image();\n    img.src = sectionImages[section];\n    img.onload = () => {\n      setImage(img);\n      drawInitialState();\n    };\n    img.onerror = e => console.error('Error loading image:', e);\n  }, [section]);\n  const drawInitialState = () => {\n    var _canvasRef$current;\n    const ctx = (_canvasRef$current = canvasRef.current) === null || _canvasRef$current === void 0 ? void 0 : _canvasRef$current.getContext('2d');\n    if (!ctx) return;\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    stripsProgress.current = Array(NUM_STRIPS).fill(0);\n    drawImage(ctx);\n  };\n\n  // Configurar canvas y animación continua\n  useEffect(() => {\n    if (!image) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d', {\n      willReadFrequently: true,\n      alpha: true\n    });\n    ctx.imageSmoothingEnabled = true;\n    ctx.imageSmoothingQuality = 'high';\n    const container = canvas.parentElement;\n    const setCanvasSize = () => {\n      canvas.width = container.clientWidth * 2;\n      canvas.height = container.clientHeight * 2;\n      canvas.style.width = `${container.clientWidth}px`;\n      canvas.style.height = `${container.clientHeight}px`;\n    };\n    setCanvasSize();\n    let animationFrameId;\n    const animate = () => {\n      // Suavizar transición del strip hover\n      if (currentStrip.current !== targetStrip) {\n        currentStrip.current = targetStrip !== null ? currentStrip.current + (targetStrip - currentStrip.current) * 0.2 : null;\n        if (Math.abs(currentStrip.current - targetStrip) < 0.1) currentStrip.current = targetStrip;\n      }\n      drawImage(ctx);\n      animationFrameId = requestAnimationFrame(animate);\n    };\n    animate();\n    const resizeObserver = new ResizeObserver(setCanvasSize);\n    resizeObserver.observe(container);\n    return () => {\n      resizeObserver.disconnect();\n      cancelAnimationFrame(animationFrameId);\n    };\n  }, [image]);\n  const getAffectedStrips = () => {\n    if (currentStrip.current === null) return [];\n    const affectedStrips = [];\n    for (let i = -3; i <= 3; i++) {\n      const stripIndex = Math.floor(currentStrip.current) + i;\n      if (stripIndex >= 0 && stripIndex < NUM_STRIPS) {\n        const distance = Math.abs(i);\n        affectedStrips.push({\n          index: stripIndex,\n          intensity: 1 - distance * 0.25 // 100% centro, 75%, 50%, 25%\n        });\n      }\n    }\n    return affectedStrips;\n  };\n  const applySaturationEffect = ctx => {\n    const affectedStrips = getAffectedStrips();\n    if (affectedStrips.length === 0) return;\n    const stripWidth = Math.ceil(ctx.canvas.width / NUM_STRIPS);\n    const totalWidth = stripWidth * NUM_STRIPS;\n    const xOffset = Math.max(0, (ctx.canvas.width - totalWidth) / 2);\n    affectedStrips.forEach(({\n      index,\n      intensity\n    }) => {\n      const xPos = Math.floor(xOffset + index * stripWidth);\n\n      // Aplicar desaturación progresiva\n      ctx.globalCompositeOperation = 'saturation';\n      ctx.fillStyle = `rgba(255, 255, 255, ${1 - intensity})`;\n      ctx.fillRect(xPos, 0, stripWidth, ctx.canvas.height);\n    });\n    ctx.globalCompositeOperation = 'source-over';\n  };\n  const drawImage = ctx => {\n    if (!image || !ctx) return;\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n    // Dibujar fondo transparente\n    ctx.fillStyle = 'transparent';\n    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n    // Calcular dimensiones\n    const stripWidth = Math.ceil(ctx.canvas.width / NUM_STRIPS);\n    const totalWidth = stripWidth * NUM_STRIPS;\n    const xOffset = Math.max(0, (ctx.canvas.width - totalWidth) / 2);\n    stripsProgress.current.forEach((progress, index) => {\n      ctx.save();\n      const xPos = Math.floor(xOffset + index * stripWidth);\n      const revealWidth = Math.ceil(stripWidth * progress);\n      ctx.beginPath();\n      ctx.rect(xPos, 0, revealWidth, ctx.canvas.height);\n      ctx.clip();\n      ctx.drawImage(image, Math.floor(index * image.width / NUM_STRIPS), 0, Math.ceil(image.width / NUM_STRIPS), image.height, xPos, 0, stripWidth, ctx.canvas.height);\n      ctx.restore();\n    });\n    applySaturationEffect(ctx);\n  };\n  const handleMouseMove = e => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const rect = canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const stripWidth = canvas.clientWidth / NUM_STRIPS;\n    const stripIndex = Math.min(Math.floor(x / stripWidth), NUM_STRIPS - 1);\n    setTargetStrip(stripIndex);\n  };\n  const startAnimation = () => {\n    if (isAnimating.current) return;\n    isAnimating.current = true;\n    const animate = startTime => {\n      var _canvasRef$current2;\n      const ctx = (_canvasRef$current2 = canvasRef.current) === null || _canvasRef$current2 === void 0 ? void 0 : _canvasRef$current2.getContext('2d');\n      if (!ctx) return;\n      stripsProgress.current = stripsProgress.current.map((_, index) => {\n        const elapsed = performance.now() - startTime - index * STRIP_DELAY;\n        const rawProgress = Math.min(elapsed / ANIMATION_DURATION, 1);\n        return 1 - Math.pow(1 - rawProgress, 3);\n      });\n      drawImage(ctx);\n      if (performance.now() - startTime < NUM_STRIPS * STRIP_DELAY + ANIMATION_DURATION) {\n        animationRef.current = requestAnimationFrame(() => animate(startTime));\n      } else {\n        isAnimating.current = false;\n        stripsProgress.current = Array(NUM_STRIPS).fill(1);\n        drawImage(ctx);\n      }\n    };\n    animationRef.current = requestAnimationFrame(() => animate(performance.now()));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home__carrousel\",\n    onClick: startAnimation,\n    onMouseMove: handleMouseMove,\n    onMouseLeave: () => setTargetStrip(null),\n    style: {\n      position: 'relative',\n      cursor: 'pointer',\n      background: 'transparent',\n      mixBlendMode: 'multiply'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        background: 'transparent',\n        imageRendering: 'auto'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 5\n  }, this);\n};\n_s(HomeCarousel, \"oHeTIxzj7jPyWz6ydwrwFMGQSRk=\");\n_c = HomeCarousel;\nexport default HomeCarousel;\nvar _c;\n$RefreshReg$(_c, \"HomeCarousel\");","map":{"version":3,"names":["React","useEffect","useRef","useState","section1Image","section2Image","section3Image","jsxDEV","_jsxDEV","sectionImages","NUM_STRIPS","ANIMATION_DURATION","STRIP_DELAY","START_ROW","HomeCarousel","section","_s","canvasRef","image","setImage","targetStrip","setTargetStrip","currentStrip","animationRef","stripsProgress","Array","fill","isAnimating","mousePos","x","y","img","Image","src","onload","drawInitialState","onerror","e","console","error","_canvasRef$current","ctx","current","getContext","clearRect","canvas","width","height","drawImage","willReadFrequently","alpha","imageSmoothingEnabled","imageSmoothingQuality","container","parentElement","setCanvasSize","clientWidth","clientHeight","style","animationFrameId","animate","Math","abs","requestAnimationFrame","resizeObserver","ResizeObserver","observe","disconnect","cancelAnimationFrame","getAffectedStrips","affectedStrips","i","stripIndex","floor","distance","push","index","intensity","applySaturationEffect","length","stripWidth","ceil","totalWidth","xOffset","max","forEach","xPos","globalCompositeOperation","fillStyle","fillRect","progress","save","revealWidth","beginPath","rect","clip","restore","handleMouseMove","getBoundingClientRect","clientX","left","min","startAnimation","startTime","_canvasRef$current2","map","_","elapsed","performance","now","rawProgress","pow","className","onClick","onMouseMove","onMouseLeave","position","cursor","background","mixBlendMode","children","ref","imageRendering","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/johnlemon/portfolio/src/components/HomeCarousel.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport section1Image from '../assets/imgs/carrousel_img_1.jpg';\nimport section2Image from '../assets/imgs/carrousel_img_2.jpg';\nimport section3Image from '../assets/imgs/carrousel_img_3.jpg';\n\nconst sectionImages = [section1Image, section2Image, section3Image];\nconst NUM_STRIPS = 20;\nconst ANIMATION_DURATION = 500;\nconst STRIP_DELAY = 30;\nconst START_ROW = 0;\n\nconst HomeCarousel = ({ section }) => {\n  const canvasRef = useRef(null);\n  const [image, setImage] = useState(null);\n  const [targetStrip, setTargetStrip] = useState(null);\n  const currentStrip = useRef(null);\n  const animationRef = useRef(null);\n  const stripsProgress = useRef(Array(NUM_STRIPS).fill(0));\n  const isAnimating = useRef(false);\n  const mousePos = useRef({ x: 0, y: 0 });\n\n  // Cargar imagen actual\n  useEffect(() => {\n    const img = new Image();\n    img.src = sectionImages[section];\n    img.onload = () => {\n      setImage(img);\n      drawInitialState();\n    };\n    img.onerror = (e) => console.error('Error loading image:', e);\n  }, [section]);\n\n  const drawInitialState = () => {\n    const ctx = canvasRef.current?.getContext('2d');\n    if (!ctx) return;\n\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    stripsProgress.current = Array(NUM_STRIPS).fill(0);\n    drawImage(ctx);\n  };\n\n  // Configurar canvas y animación continua\n  useEffect(() => {\n    if (!image) return;\n\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d', { \n      willReadFrequently: true,\n      alpha: true\n    });\n    \n    ctx.imageSmoothingEnabled = true;\n    ctx.imageSmoothingQuality = 'high';\n\n    const container = canvas.parentElement;\n    \n    const setCanvasSize = () => {\n      canvas.width = container.clientWidth * 2;\n      canvas.height = container.clientHeight * 2;\n      canvas.style.width = `${container.clientWidth}px`;\n      canvas.style.height = `${container.clientHeight}px`;\n    };\n\n    setCanvasSize();\n    \n    let animationFrameId;\n    const animate = () => {\n      // Suavizar transición del strip hover\n      if (currentStrip.current !== targetStrip) {\n        currentStrip.current = targetStrip !== null ? \n          currentStrip.current + (targetStrip - currentStrip.current) * 0.2 :\n          null;\n        if (Math.abs(currentStrip.current - targetStrip) < 0.1) currentStrip.current = targetStrip;\n      }\n      \n      drawImage(ctx);\n      animationFrameId = requestAnimationFrame(animate);\n    };\n    \n    animate();\n    \n    const resizeObserver = new ResizeObserver(setCanvasSize);\n    resizeObserver.observe(container);\n\n    return () => {\n      resizeObserver.disconnect();\n      cancelAnimationFrame(animationFrameId);\n    };\n  }, [image]);\n\n  const getAffectedStrips = () => {\n    if (currentStrip.current === null) return [];\n    \n    const affectedStrips = [];\n    for (let i = -3; i <= 3; i++) {\n      const stripIndex = Math.floor(currentStrip.current) + i;\n      if (stripIndex >= 0 && stripIndex < NUM_STRIPS) {\n        const distance = Math.abs(i);\n        affectedStrips.push({\n          index: stripIndex,\n          intensity: 1 - (distance * 0.25) // 100% centro, 75%, 50%, 25%\n        });\n      }\n    }\n    return affectedStrips;\n  };\n\n  const applySaturationEffect = (ctx) => {\n    const affectedStrips = getAffectedStrips();\n    if (affectedStrips.length === 0) return;\n    \n    const stripWidth = Math.ceil(ctx.canvas.width / NUM_STRIPS);\n    const totalWidth = stripWidth * NUM_STRIPS;\n    const xOffset = Math.max(0, (ctx.canvas.width - totalWidth) / 2);\n\n    affectedStrips.forEach(({ index, intensity }) => {\n      const xPos = Math.floor(xOffset + index * stripWidth);\n      \n      // Aplicar desaturación progresiva\n      ctx.globalCompositeOperation = 'saturation';\n      ctx.fillStyle = `rgba(255, 255, 255, ${1 - intensity})`;\n      ctx.fillRect(xPos, 0, stripWidth, ctx.canvas.height);\n    });\n    \n    ctx.globalCompositeOperation = 'source-over';\n  };\n\n  const drawImage = (ctx) => {\n    if (!image || !ctx) return;\n\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    \n    // Dibujar fondo transparente\n    ctx.fillStyle = 'transparent';\n    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    \n    // Calcular dimensiones\n    const stripWidth = Math.ceil(ctx.canvas.width / NUM_STRIPS);\n    const totalWidth = stripWidth * NUM_STRIPS;\n    const xOffset = Math.max(0, (ctx.canvas.width - totalWidth) / 2);\n\n    stripsProgress.current.forEach((progress, index) => {\n      ctx.save();\n      \n      const xPos = Math.floor(xOffset + index * stripWidth);\n      const revealWidth = Math.ceil(stripWidth * progress);\n\n      ctx.beginPath();\n      ctx.rect(xPos, 0, revealWidth, ctx.canvas.height);\n      ctx.clip();\n      \n      ctx.drawImage(\n        image,\n        Math.floor((index * image.width) / NUM_STRIPS),\n        0,\n        Math.ceil(image.width / NUM_STRIPS),\n        image.height,\n        xPos,\n        0,\n        stripWidth,\n        ctx.canvas.height\n      );\n      \n      ctx.restore();\n    });\n\n    applySaturationEffect(ctx);\n  };\n\n  const handleMouseMove = (e) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    \n    const rect = canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const stripWidth = canvas.clientWidth / NUM_STRIPS;\n    const stripIndex = Math.min(Math.floor(x / stripWidth), NUM_STRIPS - 1);\n    \n    setTargetStrip(stripIndex);\n  };\n\n  const startAnimation = () => {\n    if (isAnimating.current) return;\n    isAnimating.current = true;\n\n    const animate = (startTime) => {\n      const ctx = canvasRef.current?.getContext('2d');\n      if (!ctx) return;\n\n      stripsProgress.current = stripsProgress.current.map((_, index) => {\n        const elapsed = performance.now() - startTime - (index * STRIP_DELAY);\n        const rawProgress = Math.min(elapsed / ANIMATION_DURATION, 1);\n        return 1 - Math.pow(1 - rawProgress, 3);\n      });\n\n      drawImage(ctx);\n\n      if (performance.now() - startTime < (NUM_STRIPS * STRIP_DELAY) + ANIMATION_DURATION) {\n        animationRef.current = requestAnimationFrame(() => animate(startTime));\n      } else {\n        isAnimating.current = false;\n        stripsProgress.current = Array(NUM_STRIPS).fill(1);\n        drawImage(ctx);\n      }\n    };\n\n    animationRef.current = requestAnimationFrame(() => animate(performance.now()));\n  };\n\n  return (\n    <div \n      className=\"home__carrousel\" \n      onClick={startAnimation}\n      onMouseMove={handleMouseMove}\n      onMouseLeave={() => setTargetStrip(null)}\n      style={{ \n        position: 'relative',\n        cursor: 'pointer',\n        background: 'transparent',\n        mixBlendMode: 'multiply'\n      }}\n    >\n      <canvas \n        ref={canvasRef}\n        style={{ \n          background: 'transparent',\n          imageRendering: 'auto'\n        }}\n      />\n    </div>\n  );\n};\n\nexport default HomeCarousel;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}