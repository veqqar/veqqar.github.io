{"ast":null,"code":"var _jsxFileName = \"/home/johnlemon/portfolio/src/components/HomeCarousel.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport section1Image from '../assets/imgs/carrousel_img_1.jpg';\nimport section2Image from '../assets/imgs/carrousel_img_2.jpg';\nimport section3Image from '../assets/imgs/carrousel_img_3.jpg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sectionImages = [section1Image, section2Image, section3Image];\nconst NUM_STRIPS = 30;\nconst ANIMATION_DURATION = 500;\nconst STRIP_DELAY = 30;\nconst START_ROW = 0;\nconst HomeCarousel = ({\n  section\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [image, setImage] = useState(null);\n  const [hoveredStrip, setHoveredStrip] = useState(null);\n  const animationRef = useRef(null);\n  const stripsProgress = useRef(Array(NUM_STRIPS).fill(0));\n  const isAnimating = useRef(false);\n  const mousePos = useRef({\n    x: 0,\n    y: 0\n  });\n\n  // Cargar imagen actual\n  useEffect(() => {\n    const img = new Image();\n    img.src = sectionImages[section];\n    img.onload = () => {\n      setImage(img);\n      drawInitialState();\n    };\n    img.onerror = e => console.error('Error loading image:', e);\n  }, [section]);\n  const drawInitialState = () => {\n    var _canvasRef$current;\n    const ctx = (_canvasRef$current = canvasRef.current) === null || _canvasRef$current === void 0 ? void 0 : _canvasRef$current.getContext('2d');\n    if (!ctx) return;\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    stripsProgress.current = Array(NUM_STRIPS).fill(0);\n    drawImage(ctx);\n  };\n\n  // Configurar canvas\n  useEffect(() => {\n    if (!image) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d', {\n      willReadFrequently: true,\n      alpha: true\n    });\n    ctx.imageSmoothingEnabled = true;\n    ctx.imageSmoothingQuality = 'high';\n    const container = canvas.parentElement;\n    const setCanvasSize = () => {\n      canvas.width = container.clientWidth * 2;\n      canvas.height = container.clientHeight * 2;\n      canvas.style.width = `${container.clientWidth}px`;\n      canvas.style.height = `${container.clientHeight}px`;\n    };\n    setCanvasSize();\n    drawImage(ctx);\n    const resizeObserver = new ResizeObserver(setCanvasSize);\n    resizeObserver.observe(container);\n    return () => {\n      resizeObserver.disconnect();\n      cancelAnimationFrame(animationRef.current);\n    };\n  }, [image]);\n  const getAffectedStrips = () => {\n    if (hoveredStrip === null) return [];\n    const affectedStrips = [];\n    // Centro + 3 strips a cada lado (7 en total)\n    for (let i = -3; i <= 3; i++) {\n      const stripIndex = hoveredStrip + i;\n      if (stripIndex >= 0 && stripIndex < NUM_STRIPS) {\n        const distance = Math.abs(i);\n        affectedStrips.push({\n          index: stripIndex,\n          intensity: Math.max(1 - distance * 0.25, 0) // 100%, 75%, 50%, 25%\n        });\n      }\n    }\n    return affectedStrips;\n  };\n  const applySaturationEffect = ctx => {\n    const affectedStrips = getAffectedStrips();\n    if (affectedStrips.length === 0) return;\n    const stripWidth = Math.ceil(ctx.canvas.width / NUM_STRIPS);\n    const totalWidth = stripWidth * NUM_STRIPS;\n    const xOffset = Math.max(0, (ctx.canvas.width - totalWidth) / 2);\n    affectedStrips.forEach(({\n      index,\n      intensity\n    }) => {\n      const xPos = Math.floor(xOffset + index * stripWidth);\n\n      // Crear overlay de saturación (blanco semitransparente)\n      ctx.globalCompositeOperation = 'overlay';\n      ctx.fillStyle = `rgba(255, 255, 255, ${0.5 * (1 - intensity)})`;\n      ctx.fillRect(xPos, 0, stripWidth, ctx.canvas.height);\n    });\n    ctx.globalCompositeOperation = 'source-over';\n  };\n  const drawImage = ctx => {\n    if (!image || !ctx) return;\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n    // Dibujar fondo transparente\n    ctx.fillStyle = 'transparent';\n    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n    // Calcular dimensiones\n    const stripWidth = Math.ceil(ctx.canvas.width / NUM_STRIPS);\n    const totalWidth = stripWidth * NUM_STRIPS;\n    const xOffset = Math.max(0, (ctx.canvas.width - totalWidth) / 2);\n\n    // Dibujar cada strip\n    stripsProgress.current.forEach((progress, index) => {\n      ctx.save();\n      const xPos = Math.floor(xOffset + index * stripWidth);\n      const revealWidth = Math.ceil(stripWidth * progress);\n\n      // Máscara de recorte\n      ctx.beginPath();\n      ctx.rect(xPos, 0, revealWidth, ctx.canvas.height);\n      ctx.clip();\n\n      // Dibujar porción de imagen\n      ctx.drawImage(image, Math.floor(index * image.width / NUM_STRIPS), 0, Math.ceil(image.width / NUM_STRIPS), image.height, xPos, 0, stripWidth, ctx.canvas.height);\n      ctx.restore();\n    });\n\n    // Aplicar efecto de saturación si hay hover\n    applySaturationEffect(ctx);\n  };\n  const handleMouseMove = e => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const rect = canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const stripWidth = canvas.clientWidth / NUM_STRIPS;\n    const stripIndex = Math.min(Math.floor(x / stripWidth), NUM_STRIPS - 1);\n    setHoveredStrip(stripIndex);\n    mousePos.current = {\n      x: e.clientX,\n      y: e.clientY\n    };\n  };\n  const startAnimation = () => {\n    if (isAnimating.current) return;\n    isAnimating.current = true;\n    const animate = startTime => {\n      var _canvasRef$current2;\n      const ctx = (_canvasRef$current2 = canvasRef.current) === null || _canvasRef$current2 === void 0 ? void 0 : _canvasRef$current2.getContext('2d');\n      if (!ctx) return;\n      stripsProgress.current = stripsProgress.current.map((_, index) => {\n        const elapsed = performance.now() - startTime - index * STRIP_DELAY;\n        const rawProgress = Math.min(elapsed / ANIMATION_DURATION, 1);\n        return 1 - Math.pow(1 - rawProgress, 3); // Easing cúbico\n      });\n      drawImage(ctx);\n      if (performance.now() - startTime < NUM_STRIPS * STRIP_DELAY + ANIMATION_DURATION) {\n        animationRef.current = requestAnimationFrame(() => animate(startTime));\n      } else {\n        isAnimating.current = false;\n        stripsProgress.current = Array(NUM_STRIPS).fill(1);\n        drawImage(ctx);\n      }\n    };\n    animationRef.current = requestAnimationFrame(() => animate(performance.now()));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home__carrousel\",\n    onClick: startAnimation,\n    onMouseMove: handleMouseMove,\n    onMouseLeave: () => setHoveredStrip(null),\n    style: {\n      position: 'relative',\n      cursor: 'pointer',\n      background: 'transparent',\n      mixBlendMode: 'multiply'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        background: 'transparent',\n        imageRendering: 'auto'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 5\n  }, this);\n};\n_s(HomeCarousel, \"Pi8I2JszxmPkuo4Fy89RanIBhoE=\");\n_c = HomeCarousel;\nexport default HomeCarousel;\nvar _c;\n$RefreshReg$(_c, \"HomeCarousel\");","map":{"version":3,"names":["React","useEffect","useRef","useState","section1Image","section2Image","section3Image","jsxDEV","_jsxDEV","sectionImages","NUM_STRIPS","ANIMATION_DURATION","STRIP_DELAY","START_ROW","HomeCarousel","section","_s","canvasRef","image","setImage","hoveredStrip","setHoveredStrip","animationRef","stripsProgress","Array","fill","isAnimating","mousePos","x","y","img","Image","src","onload","drawInitialState","onerror","e","console","error","_canvasRef$current","ctx","current","getContext","clearRect","canvas","width","height","drawImage","willReadFrequently","alpha","imageSmoothingEnabled","imageSmoothingQuality","container","parentElement","setCanvasSize","clientWidth","clientHeight","style","resizeObserver","ResizeObserver","observe","disconnect","cancelAnimationFrame","getAffectedStrips","affectedStrips","i","stripIndex","distance","Math","abs","push","index","intensity","max","applySaturationEffect","length","stripWidth","ceil","totalWidth","xOffset","forEach","xPos","floor","globalCompositeOperation","fillStyle","fillRect","progress","save","revealWidth","beginPath","rect","clip","restore","handleMouseMove","getBoundingClientRect","clientX","left","min","clientY","startAnimation","animate","startTime","_canvasRef$current2","map","_","elapsed","performance","now","rawProgress","pow","requestAnimationFrame","className","onClick","onMouseMove","onMouseLeave","position","cursor","background","mixBlendMode","children","ref","imageRendering","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/johnlemon/portfolio/src/components/HomeCarousel.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport section1Image from '../assets/imgs/carrousel_img_1.jpg';\nimport section2Image from '../assets/imgs/carrousel_img_2.jpg';\nimport section3Image from '../assets/imgs/carrousel_img_3.jpg';\n\nconst sectionImages = [section1Image, section2Image, section3Image];\nconst NUM_STRIPS = 30;\nconst ANIMATION_DURATION = 500;\nconst STRIP_DELAY = 30;\nconst START_ROW = 0;\n\nconst HomeCarousel = ({ section }) => {\n  const canvasRef = useRef(null);\n  const [image, setImage] = useState(null);\n  const [hoveredStrip, setHoveredStrip] = useState(null);\n  const animationRef = useRef(null);\n  const stripsProgress = useRef(Array(NUM_STRIPS).fill(0));\n  const isAnimating = useRef(false);\n  const mousePos = useRef({ x: 0, y: 0 });\n\n  // Cargar imagen actual\n  useEffect(() => {\n    const img = new Image();\n    img.src = sectionImages[section];\n    img.onload = () => {\n      setImage(img);\n      drawInitialState();\n    };\n    img.onerror = (e) => console.error('Error loading image:', e);\n  }, [section]);\n\n  const drawInitialState = () => {\n    const ctx = canvasRef.current?.getContext('2d');\n    if (!ctx) return;\n\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    stripsProgress.current = Array(NUM_STRIPS).fill(0);\n    drawImage(ctx);\n  };\n\n  // Configurar canvas\n  useEffect(() => {\n    if (!image) return;\n\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d', { \n      willReadFrequently: true,\n      alpha: true\n    });\n    \n    ctx.imageSmoothingEnabled = true;\n    ctx.imageSmoothingQuality = 'high';\n\n    const container = canvas.parentElement;\n    \n    const setCanvasSize = () => {\n      canvas.width = container.clientWidth * 2;\n      canvas.height = container.clientHeight * 2;\n      canvas.style.width = `${container.clientWidth}px`;\n      canvas.style.height = `${container.clientHeight}px`;\n    };\n\n    setCanvasSize();\n    drawImage(ctx);\n\n    const resizeObserver = new ResizeObserver(setCanvasSize);\n    resizeObserver.observe(container);\n\n    return () => {\n      resizeObserver.disconnect();\n      cancelAnimationFrame(animationRef.current);\n    };\n  }, [image]);\n\n  const getAffectedStrips = () => {\n    if (hoveredStrip === null) return [];\n    \n    const affectedStrips = [];\n    // Centro + 3 strips a cada lado (7 en total)\n    for (let i = -3; i <= 3; i++) {\n      const stripIndex = hoveredStrip + i;\n      if (stripIndex >= 0 && stripIndex < NUM_STRIPS) {\n        const distance = Math.abs(i);\n        affectedStrips.push({\n          index: stripIndex,\n          intensity: Math.max(1 - (distance * 0.25), 0) // 100%, 75%, 50%, 25%\n        });\n      }\n    }\n    return affectedStrips;\n  };\n\n  const applySaturationEffect = (ctx) => {\n    const affectedStrips = getAffectedStrips();\n    if (affectedStrips.length === 0) return;\n    \n    const stripWidth = Math.ceil(ctx.canvas.width / NUM_STRIPS);\n    const totalWidth = stripWidth * NUM_STRIPS;\n    const xOffset = Math.max(0, (ctx.canvas.width - totalWidth) / 2);\n\n    affectedStrips.forEach(({ index, intensity }) => {\n      const xPos = Math.floor(xOffset + index * stripWidth);\n      \n      // Crear overlay de saturación (blanco semitransparente)\n      ctx.globalCompositeOperation = 'overlay';\n      ctx.fillStyle = `rgba(255, 255, 255, ${0.5 * (1 - intensity)})`;\n      ctx.fillRect(xPos, 0, stripWidth, ctx.canvas.height);\n    });\n    \n    ctx.globalCompositeOperation = 'source-over';\n  };\n\n  const drawImage = (ctx) => {\n    if (!image || !ctx) return;\n\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    \n    // Dibujar fondo transparente\n    ctx.fillStyle = 'transparent';\n    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    \n    // Calcular dimensiones\n    const stripWidth = Math.ceil(ctx.canvas.width / NUM_STRIPS);\n    const totalWidth = stripWidth * NUM_STRIPS;\n    const xOffset = Math.max(0, (ctx.canvas.width - totalWidth) / 2);\n\n    // Dibujar cada strip\n    stripsProgress.current.forEach((progress, index) => {\n      ctx.save();\n      \n      const xPos = Math.floor(xOffset + index * stripWidth);\n      const revealWidth = Math.ceil(stripWidth * progress);\n\n      // Máscara de recorte\n      ctx.beginPath();\n      ctx.rect(xPos, 0, revealWidth, ctx.canvas.height);\n      ctx.clip();\n      \n      // Dibujar porción de imagen\n      ctx.drawImage(\n        image,\n        Math.floor((index * image.width) / NUM_STRIPS),\n        0,\n        Math.ceil(image.width / NUM_STRIPS),\n        image.height,\n        xPos,\n        0,\n        stripWidth,\n        ctx.canvas.height\n      );\n      \n      ctx.restore();\n    });\n\n    // Aplicar efecto de saturación si hay hover\n    applySaturationEffect(ctx);\n  };\n\n  const handleMouseMove = (e) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    \n    const rect = canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const stripWidth = canvas.clientWidth / NUM_STRIPS;\n    const stripIndex = Math.min(Math.floor(x / stripWidth), NUM_STRIPS - 1);\n    \n    setHoveredStrip(stripIndex);\n    mousePos.current = { x: e.clientX, y: e.clientY };\n  };\n\n  const startAnimation = () => {\n    if (isAnimating.current) return;\n    isAnimating.current = true;\n\n    const animate = (startTime) => {\n      const ctx = canvasRef.current?.getContext('2d');\n      if (!ctx) return;\n\n      stripsProgress.current = stripsProgress.current.map((_, index) => {\n        const elapsed = performance.now() - startTime - (index * STRIP_DELAY);\n        const rawProgress = Math.min(elapsed / ANIMATION_DURATION, 1);\n        return 1 - Math.pow(1 - rawProgress, 3); // Easing cúbico\n      });\n\n      drawImage(ctx);\n\n      if (performance.now() - startTime < (NUM_STRIPS * STRIP_DELAY) + ANIMATION_DURATION) {\n        animationRef.current = requestAnimationFrame(() => animate(startTime));\n      } else {\n        isAnimating.current = false;\n        stripsProgress.current = Array(NUM_STRIPS).fill(1);\n        drawImage(ctx);\n      }\n    };\n\n    animationRef.current = requestAnimationFrame(() => animate(performance.now()));\n  };\n\n  return (\n    <div \n      className=\"home__carrousel\" \n      onClick={startAnimation}\n      onMouseMove={handleMouseMove}\n      onMouseLeave={() => setHoveredStrip(null)}\n      style={{ \n        position: 'relative',\n        cursor: 'pointer',\n        background: 'transparent',\n        mixBlendMode: 'multiply'\n      }}\n    >\n      <canvas \n        ref={canvasRef}\n        style={{ \n          background: 'transparent',\n          imageRendering: 'auto'\n        }}\n      />\n    </div>\n  );\n};\n\nexport default HomeCarousel;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}